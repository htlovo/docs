Pro Git 第2版 大致内容


起步


本地版本控制系统：RCS
集中化的版本控制系统CVCS：CVS,Subversion,Preforce
分布式版本控制系统DVCS：Git,Mercurial,Bazaar,Darcs

Git
直接记录快照，而非差异比较
近乎所有的操作都是本地执行
Git保证完整性：Git数据库中保存的信息都是以文件内容的哈希值来索引。
Git一般只添加数据：Git操作几乎只往Git数据库中增加数据。一般不会执行不可逆操作。

三种状态：文件只可能处于三种状态之一
已提交（committed）：数据已经安全的保存在本地数据中
已修改（modified）：修改了文件，但还没保存到数据库中
以暂存（staged）：对一个已修改的文件的当前版本做了标记，是只包含在下次提交的快照中

Git项目的三个工作区域：Git仓库、工作目录、暂存区域

基本的Git工作流程：
1.在工作目录中修改文件
2.暂存文件，将文件的快照放入暂存区域
3.提交更新，找到暂存区域的文件，将快照永久性存储到Git仓库中


在Windows上安装
Git for Windows(msysGit),不同于Git,http://msysgit.github.io
	http://git-scm.com/download/win
GitHub for Wondows,包含图形化和命令行版本的Git
	http://windows.github.com

初次运行Git前的配置
Git自带一个git config的工具来帮助设置控制Git外观和行为的配置变量。这些变量储存在三个位置
1. /etc/gitconfig文件：包含系统上的每一个用户及他们仓库的通用配置。使用带有--system选项的git config会从此文件读写配置变量
2. ~/.gitconfig或 ~/.config/git/config文件：只针对当前用户。可以传递--global选项让Git读写此文件。
3.当前使用仓库的Git目录中的config文件（即.git/config）：针对该仓库
每一个级别覆盖上一级别的配置
在Windows系统中，Git会查找$HOME目录下（一般是C:\Users\$USER）的.gitconfig文件。Git同样也会找/etc/gitconfig文件，但只限于MSys的根目录下，即安装Git时所选的目标位置

用户信息
设置用户名称与邮箱地址，每次提交都会使用这些信息：
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
可以不用--global来针对特定项目使用不同的用户名称和邮箱地址

文本编辑器
配置默认文本编辑器，当Git需要你输入信息时会调用它。如果未配置，Git会使用操作系统默认的文本编辑器。使用Emacs:
$ git config -global core.editor emacs

检查配置信息
使用git config --list命令列出所有Git当时能找到的配置
可以使用git config <key>来检查Git的某一项配置：
$ git config user.name
Joh Doe

获取帮助
三种方法找到Git命令的使用手册
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
例如想要获得config命令手册：
$ git help config



Git基础
配置并初始化一个仓库（repository）、开始或停止跟踪（track）文件、暂存（stage）或提交（commit）更改。向或从远程仓库推送（push）或拉取（pull）文件


获取Git仓库，一种是在现有项目或目录下导入到Git中，另一种是从服务器克隆一个现有的Git仓库

在现有目录中初始化仓库
进入该项目目录并输入git init,该命令将创建一个名为.git的子目录，里面含有你初始化Git仓库中所有的必须文件。但是这只是初始化，项目里的文件还没有被跟踪。
如果是在一个已经存在文件的文件夹中初始化Git仓库进行版本控制的话，应该开始跟踪这些文件并提交。使用git add命令来跟踪，然后执行git commit提交。

克隆现有仓库
使用git clone命令，格式是git clone [url]。如：
$ git clone https://github.com/libgit2/libgit2
这会在当前目录下创建一个名为“libgit2”的目录。如果想在克隆时自定义本地仓库的名字，可是使用如下命令：
$ git clone https://github.com/libgit2/libgit2 mylibgit


记录每次更新到仓库
检查当前文件状态：git status
跟踪新文件：git add
暂存已修改文件：git add
git add命令使用文件或目录的路径作为参数
状态简览：git status -s或git status --short
?? 未跟踪文件
A  新添加到暂存区的文件
M  已修改并放入暂存区的文件
 M 已修改未放入暂存区的文件

比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容
$ git diff
查看已暂存的要添加到下次提交里的内容
$ git diff --staged
$ git diff --cached

提交更新
$ git commit
会启动文本编辑器以便输入本次提交的说明。
将提交信息与命令放在同一行
$ git commit -m "提交信息"

跳过使用暂存区域，即跳过git add
$ git commit -a


远程仓库的使用

查看远程仓库，会列出你指定的每一个远程服务器的简写
$ git remote
指定选项-v会显示需要读写远程仓库使用的Git保存的简写与其对应的URL

添加一个新的远程仓库，同时指定一个简写
$ git remote add <shortname> <url>

从远程仓库中抓取与拉取
$ git fetch [remote-name]
访问远程仓库拉取你还没有的数据到本地仓库，但并不会自动合并或修改你当前的工作
git pull命令会自动抓取然后合并远程分支到当前分支。

推送到远程仓库
$ git push [remote-name] [branch-name]
例如
$ git push origin master

查看远程仓库
$ git remote show [remote-name]

远程仓库的移除与重命名
将pb重命名为paul：
$ git remote rename pb paul
移除paul
$ git remote rm paul


打标签

列出标签
$ git tag
只显示v1.8.5系列
$ git tag -l 'v1.8.5*'

创建标签





clone命令克隆仓库时会自动将其添加为远程仓库并默认以“origin”为简写

